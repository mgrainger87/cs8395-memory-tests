{
    "problem_identifier": "course_schedule",
    "model_identifier": "chatgpt-latest",
    "prompt_identifier": "34",
    "solution_code": "from collections import defaultdict, deque\nfrom typing import List\n\ndef can_finish(numCourses: int, prerequisites: List[List[int]]) -> bool:\n    # Create an adjacency list to represent the graph\n    graph = defaultdict(list)\n    # Create a list to track the number of prerequisites for each course\n    prerequisites_count = [0] * numCourses\n\n    # Build the graph and count the number of prerequisites for each course\n    for prerequisite in prerequisites:\n        course, prerequisite_course = prerequisite\n        graph[prerequisite_course].append(course)\n        prerequisites_count[course] += 1\n\n    # Create a queue to perform BFS\n    queue = deque()\n\n    # Add all the courses with no prerequisites to the queue\n    for course in range(numCourses):\n        if prerequisites_count[course] == 0:\n            queue.append(course)\n\n    # Perform BFS\n    while queue:\n        course = queue.popleft()\n        numCourses -= 1\n\n        # Decrement the prerequisites count for all the neighbors of the current course\n        for neighbor in graph[course]:\n            prerequisites_count[neighbor] -= 1\n\n            # If a neighbor no longer has any prerequisites, add it to the queue\n            if prerequisites_count[neighbor] == 0:\n                queue.append(neighbor)\n\n    # If we were able to visit all the courses and there are no cycles, return True\n    return numCourses == 0",
    "feedback": null
}
{
    "problem_identifier": "combination_sum_ii",
    "model_identifier": "chatgpt-latest",
    "prompt_identifier": "70",
    "solution_code": "def combination_sum_ii(candidates, target):\n    # Sort the candidates in ascending order\n    candidates.sort()\n    # Initialize an empty list to store the unique combinations\n    combinations = []\n    # Call the recursive function to find the combinations\n    find_combinations(candidates, target, [], combinations)\n    return combinations\n\ndef find_combinations(candidates, target, current_combination, combinations):\n    # If the target is 0, we have found a valid combination\n    if target == 0:\n        # Add the current combination to the list of combinations\n        combinations.append(current_combination)\n        return\n    # If the target is negative or there are no more candidates, return\n    if target < 0 or not candidates:\n        return\n    # Iterate through the candidates\n    for i in range(len(candidates)):\n        # Skip duplicates to avoid duplicate combinations\n        if i > 0 and candidates[i] == candidates[i-1]:\n            continue\n        # Choose the current candidate\n        current_candidate = candidates[i]\n        # Update the target by subtracting the current candidate\n        updated_target = target - current_candidate\n        # Create a new combination by adding the current candidate to the current combination\n        updated_combination = current_combination + [current_candidate]\n        # Recursively call the function with the updated target, combination, and remaining candidates\n        find_combinations(candidates[i+1:], updated_target, updated_combination, combinations)",
    "feedback": null
}
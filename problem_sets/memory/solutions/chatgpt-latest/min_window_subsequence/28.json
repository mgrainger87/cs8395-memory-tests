{
    "problem_identifier": "min_window_subsequence",
    "model_identifier": "chatgpt-latest",
    "prompt_identifier": "28",
    "solution_code": "def min_window(S: str, T: str) -> str:\n    # Store indices of each character in T in S\n    indices = {}\n    for i in range(len(S)):\n        if S[i] in T:\n            if S[i] not in indices:\n                indices[S[i]] = []\n            indices[S[i]].append(i)\n    \n    # Initialize pointers and min_length\n    left = right = 0\n    min_length = float('inf')\n    min_left = min_right = 0\n    \n    # Iterate through characters in T\n    for char in T:\n        # If character not found in S, return empty string\n        if char not in indices:\n            return \"\"\n        \n        # Move right pointer to next index of character in S\n        while indices[char] and indices[char][0] < right:\n            indices[char].pop(0)\n        if not indices[char]:\n            return \"\"\n        right = indices[char][0]\n        \n        # If right pointer reaches end of S, break out of loop\n        if right == len(S) - 1:\n            break\n    \n    # Calculate minimum length and store indices of left and right pointers\n    min_length = right - left + 1\n    min_left = left\n    min_right = right\n    \n    # Move left pointer to next index of first character in T in S\n    left = indices[T[0]][0] + 1\n    \n    # Iterate through the remaining characters in S\n    for i in range(left, len(S)):\n        # If character not found in S, return empty string\n        if S[i] not in indices:\n            return \"\"\n        \n        # Move right pointer to next index of character in S\n        while indices[S[i]] and indices[S[i]][0] < right:\n            indices[S[i]].pop(0)\n        if not indices[S[i]]:\n            return \"\"\n        right = indices[S[i]][0]\n        \n        # Update minimum length and store indices of left and right pointers\n        if right - left + 1 < min_length:\n            min_length = right - left + 1\n            min_left = left\n            min_right = right\n        \n        # Move left pointer to next index of first character in T in S\n        left = indices[T[0]][0] + 1\n    \n    # Return substring of S from left index to right index\n    return S[min_left:min_right+1]",
    "feedback": null
}